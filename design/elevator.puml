@startuml

class ElevatorController {
- currentFloor: int
- destinationFloor: int
- currentElevatorState: ElevatorState
- elevatorMotor: ElevatorMotor
- doorMotor: DoorMotor
+ <<final>> MAX_FLOOR: int
+ {static} <<final>> DEFAULT_FLOOR: int
+ <<final>> ELEVATOR_GOING_UP_CLOSED_STATE: ElevatorGoingUpClosedState
+ <<final>> ELEVATOR_GOING_DOWN_CLOSED_STATE: ElevatorGoingDownClosedState
+ <<final>> ELEVATOR_IDLE_OPEN_STATE: ElevatorIdleOpenState
+ <<final>> ElevatorIdleClosedState: ELEVATOR_IDLE_CLOSED_STATE
+ <<final>> ElevatorIdleBlockedState: ELEVATOR_IDLE_BLOCKED_STATE
+ <<create>> ElevatorController(maxFloor: int)
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
}

interface Listener {
+ update(): void
}

interface DoorSensorListener {
+ onDoorClosed(): void
+ onDoorOpen(): void
+ onDoorBlocked(): void
}

interface ElevatorPanelListener{
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ onCloseButtonPressed(): void
}

interface FloorSensorListener {
+ onFloorReached(): void
}

Listener <|-down- DoorSensorListener
Listener <|-down- ElevatorPanelListener
Listener <|-down- FloorSensorListener


ElevatorController .up.|> DoorSensorListener
ElevatorController .up.|> ElevatorPanelListener
ElevatorController .up.|> FloorSensorListener

class Listenable {
# listeners: List<Listener>
+ attachListener(listener: Listener): void
+ detachListener(listener: Listener): void
+ notifyEvent(): void
}

class DoorSensor {
- currentDoorState: DoorState
+ enum DoorState {OPEN,CLOSED,BLOCKED}
+ setCurrentDoorState(currentState: DoorState): void
+ notifyEvent(): void
}

class ElevatorPanel {
- buttonPressed: ElevatorButton
+ press(buttonPressed: ElevatorButton): void
+ notifyEvent(): void
}

class FloorSensor {
+ floorReached(): void
+ notifyEvent(): void
}

Listenable <|-down- DoorSensor
Listenable <|-down- ElevatorPanel
Listenable <|-down- FloorSensor


class Environment {
- {static} INSTANCE: Environment
- doorSensor: DoorSensor
- elevatorPanel: ElevatorPanel
- floorSensor: FloorSensor
+ {static} getInstance(): Environment
+ registerElevatorController(elevatorController: ElevatorController): void
+ pressButton(button: ElevatorButton)
+ closeDoor(): void
+ openDoor(): void
+ blockDoor(): void
}

Environment -up-> DoorSensor
Environment -up-> ElevatorPanel
Environment -up-> FloorSensor

class ElevatorButton {
- buttonType: Button
- buttonValue: int
+ enum ButtonType {OPEN_BUTTON, CLOSED_BUTTON, FLOOR_BUTTON}
+ <<create>> ElevatorButton(buttonType: ButtonType)
+ <<create>> ElevatorButton(buttonType: ButtonType, buttonValue: int)
}

ElevatorController ..> ElevatorButton

class DoorMotor {
+ goOpen(): void
+ goClose(): void
+ goBreak(): void
}

class ElevatorMotor {
+ goUp(): void
+ goDown(): void
+ goBreak(): void
}

ElevatorController --> DoorMotor
ElevatorController --> ElevatorMotor

abstract class ElevatorState {
- context: ElevatorController
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
+ setContext(context: ElevatorController): void
}

ElevatorController o-right- ElevatorState

class IdleOpenState {
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
}

class IdleClosedState {
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
}

class IdleBlockedState {
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
}

class GoingUpClosedState {
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
}

class GoingDownClosedState {
+ onFloorButtonPressed(floor: int): void
+ onOpenButtonPressed(): void
+ opCloseButtonPressed(): void
+ onFloorReached(): void
+ onDoorOpen(): void
+ onDoorClose(): void
+ onDoorBlock():void
}

ElevatorState <|-- IdleOpenState
ElevatorState <|-- IdleClosedState
ElevatorState <|-- IdleBlockedState
ElevatorState <|-- GoingUpClosedState
ElevatorState <|-- GoingDownClosedState

@enduml